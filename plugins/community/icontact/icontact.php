<?php/** * @copyright (C) 2008 by Slashes & Dots Sdn Bhd - All rights reserved! * @license http://www.azrul.com Copyrighted Commercial Software */// no direct accessdefined('_JEXEC') or die('Restricted access');require_once( JPATH_ROOT . DS . 'components' . DS . 'com_community' . DS . 'libraries' . DS . 'core.php');if(!class_exists('plgCommunityIcontact')){	class plgCommunityIcontact extends CApplications	{			var $name 		= "Icontact Application";		var $_name		= 'icontact';	    function plgCommunityIcontact(& $subject, $config)	    {			parent::__construct($subject, $config);			$this->createTable();        }		/**		 * Create icontact table in jomsocial. 		 */			private function createTable()		{			$db	=& JFactory::getDBO();			$db->setQuery("CREATE TABLE IF NOT EXISTS `#__community_icontact` 						  (						  	`userid` int(11) NOT NULL,						  	`icontactid` int(11) NOT NULL DEFAULT 0,							`status` tinyint(4) NOT NULL DEFAULT 0,						  	 PRIMARY KEY (`userid`)						  )  ENGINE=MyISAM DEFAULT CHARSET=utf8;");						$db->query();		}		/**		 * Save contact to icontact when new user trigger.		 */		function onAfterStoreUser($user, $isnew, $success, $msg)		{			// Register new user in joomla.			if ($isnew) 			{				// Build contact information.	            $objUser = CFactory::getUser( $user['id'] );	            $this->onUserDetailsUpdate( $objUser );			}		}				/**		 * Save contact to icontact when edit details trigger.		 * @params $data	New CUser object		 		 */			function onUserDetailsUpdate($objUser)		{            // Instantiate icontact server object.	        $objServer = new CIContactServer($this->params);	                    // Instantiate contact object.            $objIContact = JTable::getInstance('IContact', 'CTable');            // If we cannot load this user from the db, he is not yet in local db            // Retrive remote icontact id and store it			$objIContact->load($objUser->id, $this->params) ;			$objIContact->store($objServer, $objUser);            		}				/**		 * Save contact to icontact when edit profile trigger.		 */			function onAfterProfileUpdate()		{            // Build contact information.            $objUser = CFactory::getUser();            $this->onUserDetailsUpdate( $objUser );		}				/**		 * Add a few more people who hasn't login to their account to iContact		 */		 				function onCronRun()		{			$db	=& JFactory::getDBO();			$query = "SELECT user.userid 					  FROM `#__community_users` as user 					  LEFT join `#__community_icontact` AS icontact ON user.userid = icontact.userid		 			  WHERE icontact.userid IS NULL		 			  ORDER BY RAND()					  LIMIT 5;";					$db->setQuery($query);			$rows = $db->loadObjectList();						foreach($rows as $row)			{				$objUser = CFactory::getUser($row->userid);            	$this->onUserDetailsUpdate( $objUser );            				}			}			}	}class CTableIContact extends JTable{	var $userid     = null;	var $icontactid = null;	var $status	    = null;	var $_params	= null;		function __construct( &$db )	{		parent::__construct( '#__community_icontact', 'userid', $db );    }        function load($userid, $params)    {    	$this->_params = $params;    	$this->userid = $userid;    	    	return parent::load( $userid );	}	    /**     *      */	         function store( $objServer , $newUserData)	{            $db	=& JFactory::getDBO();        $this->status = 1;                // Accountid and client fodlerid is obtained dynamically. Cache this        $accId 			= $this->_params->get('userAccountId');        $clientFolderId = $this->_params->get('clientFolderId');                if(empty($accId) || empty($clientFolderId)) {	        // Get account id from icontact			$response = $objServer->callResource("/a/", 'GET');	        if( $response['code'] != 200 ) { return false; }	    	$accId = $response['data']['accounts'][0]['accountId'];	    		    	// Get client response id from icontact      		$response = $objServer->callResource("/a/{$accId}/c/", 'GET');      		if( $response['code'] != 200 ) { return false; }      		$clientFolderId = $response['data']['clientfolders']['0']['clientFolderId'];	        $this->_params->set('userAccountId', $accId);	        $this->_params->set('clientFolderId', $clientFolderId);	        	        $paramsStr = $this->_params->toString();	        	    	$db	=& JFactory::getDBO();	    				// Store account id and client folder id to plugin param.			$db->setQuery("UPDATE " . $db->nameQuote('#__plugins') . "						   SET params = " . $db->quote($paramsStr)."						   WHERE element  = 'icontact'");			$db->query();						// Clear icontact table if the configuration changed.			$db->setQuery("TRUNCATE TABLE " . $db->nameQuote('#__community_icontact'));			$db->query();			$this->icontactid = null;					}                if( $this->icontactid == null )        {        	$user = CFactory::getUser( $this->userid );        	        	$data = $this->getUserData($newUserData);			$data = array( $data );						if( !empty( $this->icontactid ) )			{				$data[0]['contactId'] = $this->icontactid;			}						// Add user to iContact        	$response = $objServer->callResource("/a/{$accId}/c/{$clientFolderId}/contacts", 'POST', $data);			if( $response['code'] != 200 )			{				// Error, icontact doesn't allow certain emails, such as 'localhost'				return false;			}			$this->icontactid = $response['data']['contacts'][0]['contactId'];        	        	// First time in the db, add to subscribe        	$data = array( array(					'contactId' => $this->icontactid,					'listId'    => $objServer->listId,					'status'    => 'normal', ));						// Subscribe user to our list			$response = $objServer->callResource("/a/{$accId}/c/{$clientFolderId}/subscriptions", 'POST', $data);			        	if( $response['code'] != 200 ) {return false; }						// Only add to db when everything is ok			$db->insertObject('#__community_icontact', $this);        }        else        {        	// User already registered to icontact and subscribed, update        	// other info        	$data = $this->getUserData($newUserData);        	$data['contactId'] = $this->icontactid;			$data = array( $data );        	$response = $objServer->callResource("/a/{$accId}/c/{$clientFolderId}/contacts", 'POST', $data);        	if( $response['code'] != 200 ) { return false; }		}                return true;	}		private function getUserData($newUserData)	{		$objUser = CFactory::getUser( $this->userid );		  		$fieldCodeFamilyName = $this->_params->get('familyname');  		$fieldCodeGivenName  = $this->_params->get('givenname');  		$fieldCodeCity       = $this->_params->get('city');  		$fieldCodeAddress    = $this->_params->get('address');  		$fieldCodeState      = $this->_params->get('state');  		$fieldCodePhone      = $this->_params->get('phone');						$email   = $newUserData->email;		$fname   = ($fieldCodeGivenName != '') ? $objUser->getInfo($fieldCodeGivenName) : '';		$fname   = $fname == '' ? $newUserData->name : $fname;		$lname   = ($fieldCodeFamilyName != '') ? $objUser->getInfo($fieldCodeFamilyName) : ''; 		$city    = ($fieldCodeCity != '') ? $objUser->getInfo($fieldCodeCity) : ''; 		$address = ($fieldCodeAddress != '') ? $objUser->getInfo($fieldCodeAddress) : ''; 		// state can have a maximum of 10 characters in icontact.com 		$state   = ($fieldCodeState != '') ? substr($objUser->getInfo($fieldCodeState), 0, 10) : ''; 		$phone   = ($fieldCodePhone != '') ? $objUser->getInfo($fieldCodePhone) : ''; 				$data = array();				$data['email']		= $newUserData->email;		$data['firstName'] 	= $fname;				if ($lname != ''){			$data['lastName'] = $lname;		}				if ($city != ''){ 			$data['city'] = $city; 		} 		 		if ($address != ''){ 			$data['street'] = $address; 		} 		 		if ($state != ''){			$data['state'] = $state;		}				if ($phone != ''){			$data['phone'] = $phone;		}				return $data;	} }/** * icontact proxy server class. */class CIContactServer{	// icontact authentification.	var $appId      = null;	var $accLogin   = null;	var $accPass    = null;	var $listId     = null;	var $host        = null;		function __construct($params)	{		$this->host     = $params->get('host');  		$this->appId    = $params->get('application_id');  		$this->accLogin = $params->get('account_id');  		$this->accPass  = $params->get('password');  		$this->listId   = $params->get('list_id');  		  		if (!$this->host || !$this->appId || !$this->accLogin || !$this->accPass || !$this->listId) {	  			JError::raiseError( 500, 'IContact plugin does not configure properly');  		}    }            function callResource($url, $method, $data = null)	{		$url    = $this->host . $url;		$handle = curl_init();				$headers = array(			'Accept: application/json',			'Content-Type: application/json',			'Api-Version: 2.0',			'Api-AppId   : ' . $this->appId,		 	'Api-Username: ' . $this->accLogin,		 	'Api-Password: ' . $this->accPass		);				curl_setopt($handle, CURLOPT_URL, $url);		curl_setopt($handle, CURLOPT_HTTPHEADER, $headers);		curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);		curl_setopt($handle, CURLOPT_SSL_VERIFYHOST, false);		curl_setopt($handle, CURLOPT_SSL_VERIFYPEER, 0);				switch ($method) {			case 'POST':				curl_setopt($handle, CURLOPT_POST, true);				curl_setopt($handle, CURLOPT_POSTFIELDS, json_encode($data));			break;			case 'PUT':				curl_setopt($handle, CURLOPT_PUT, true);				$file_handle = fopen($data, 'r');				curl_setopt($handle, CURLOPT_INFILE, $file_handle);			break;			case 'DELETE':				curl_setopt($handle, CURLOPT_CUSTOMREQUEST, 'DELETE');			break;		}				$response = curl_exec($handle);		$response = json_decode($response, true);		$code = curl_getinfo($handle, CURLINFO_HTTP_CODE);				curl_close($handle);				if($code != 200)		{			print_r($response);exit;		}		return array(			'code' => $code,			'data' => $response,		);	}}